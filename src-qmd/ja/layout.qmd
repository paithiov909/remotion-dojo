---
title: 2. Layout
sidebar_position: 2
---

## p5.jsとの違い

この資料では、次のWebサイトに掲載されているアニメーションを参考にした作例を掲載する。

- [クリエイティブコーディングの教科書](https://zenn.dev/baroqueengine/books/a19140f2d9fc1a)
- [motiontable](http://foxcodex.html.xdomain.jp/index.html)

このうち、一つめのWebサイトは、[p5.js](https://p5js.org/)を使ったアニメーションを実装している。たとえば、[イージング](https://zenn.dev/baroqueengine/books/a19140f2d9fc1a/viewer/764b7c#%E3%82%A4%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9)という章には、次のようなコードが載せられている。ここで`lerp()`は、引数`a, b, t`を受け取って`a + (b - a) * t`を返す、線形補間をするための関数である。

```js
let prevR, nextR, d, t;

function setup() {
  createCanvas(windowWidth, windowHeight);

  d = 200;
  reset();
}

function reset() {
  prevR = d;
  nextR = random(20, 400);
  t = 0;
}

function draw() {
  t += 0.01;

  // イージング後の余韻を持たせるため、すぐにはリセットしない
  if (t >= 1.4) {
    reset();
    return;
  }

  // t = 1.0 でイージング終了なので、t > 1.0 の場合は画面を更新しない
  if (t > 1.0) {
    return;
  }

  clear();
  d = lerp(prevR, nextR, easeInOutBack(t));
  circle(width / 2, height / 2, d);
}

function easeInOutBack(t) {
  const c1 = 1.70158;
  const c2 = c1 * 1.525;

  return t < 0.5 ? (pow(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2 : (pow(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;
}
```

p5.jsは、アニメーションループのなかで`draw()`が繰り返し呼び出され、Canvas要素を更新することで描画をおこなう仕組みになっている。一方で、Remotionにおいては、これと同じようなアニメーションループが存在しないため、RemotionのCompositionに渡されるReactコンポーネントでは、副作用がある書き方はできない点に注意が必要だ。

この点に気をつけながら、上のコードをRemotion向けに書き直すと、たとえば、次のように書けるだろう。

::: {.panel-tabset group="ResizeCircle"}

## Video

```{=mdx}
import { Player } from "@remotion/player";
import { ResizeCircle } from "@site/src/components/Layout/ResizeCircle.tsx";

export const MyPlayer1 = () => (
  <Player
    component={ResizeCircle}
    durationInFrames={260}
    compositionWidth={768}
    compositionHeight={432}
    fps={30}
    controls
    loop
    style={{ width: "100%" }}
  >
  </Player>
);

<MyPlayer1></MyPlayer1>

---
```

## Code

```{.tsx filename="Layout/ResizeCircle.tsx"}
{{< include ../../src/components/Layout/ResizeCircle.tsx >}}
```

:::


## 繰り返す・並べる

Remotionでアニメーションを実装する際には、上の例のように、適当な粒度のアニメーションごとにコンポーネントを切り分けるようにすると扱いやすい。そうして用意したコンポーネントをフレームに応じて出し分けるには、[Sequence](https://www.remotion.dev/docs/sequence)や、[Series](https://www.remotion.dev/docs/series)、[TransitionSeries](https://www.remotion.dev/docs/transitions/transitionseries)を使うことができる。

一方で、同じようなアニメーションを繰り返したい場合には、次の例のように、[Loop](https://www.remotion.dev/docs/loop)を使うのが便利だ。

::: {.panel-tabset group="RepeatCircle"}

## Video

```{=mdx}
import { RepeatCircle } from "@site/src/components/Layout/RepeatCircle.tsx";

export const MyPlayer2 = () => (
  <Player
    component={RepeatCircle}
    durationInFrames={240}
    compositionWidth={768}
    compositionHeight={432}
    fps={30}
    controls
    loop
    style={{ width: "100%" }}
  >
  </Player>
);

<MyPlayer2></MyPlayer2>

---
```

## Code

```{.tsx filename="Layout/RepeatCircle.tsx"}
{{< include ../../src/components/Layout/RepeatCircle.tsx  >}}
```

:::

ちなみに、Remotionで描画する要素はSVGでなくてもかまわない。JSXとして描画できるものであれば大抵のものは描画できるので、もちろん、ふつうのdiv要素を並べることもできる。

::: {.panel-tabset group="RepeatDiv"}

## Video

```{=mdx}
import { RepeatDiv } from "@site/src/components/Layout/RepeatDiv.tsx";

export const MyPlayer3 = () => (
  <Player
    component={RepeatDiv}
    durationInFrames={240}
    compositionWidth={768}
    compositionHeight={432}
    fps={30}
    controls
    loop
    style={{ width: "100%" }}
  >
  </Player>
);

<MyPlayer3></MyPlayer3>

---
```

## Code

```{.tsx filename="Repeat/RepeatDiv.tsx"}
{{< include ../../src/components/Layout/RepeatDiv.tsx  >}}
```

:::


## 重ねる・ずらす

JSX（HTML）なので、コードとして下に書かれている要素ほど、上に重なるように描画される。

::: {.panel-tabset group="OverlapCircle.tsx"}

## Video

```{=mdx}
import { OverlapCircle } from "@site/src/components/Layout/OverlapCircle.tsx";

export const MyPlayer4 = () => (
  <Player
    component={OverlapCircle}
    durationInFrames={240}
    compositionWidth={768}
    compositionHeight={432}
    fps={30}
    controls
    loop
    style={{ width: "100%" }}
  >
  </Player>
);

<MyPlayer4></MyPlayer4>

---
```

## Code

```{.tsx filename="Layout/OverlapCircle.tsx"}
{{< include ../../src/components/Layout/OverlapCircle.tsx  >}}
```

:::

[mix-blend-mode](https://developer.mozilla.org/ja/docs/Web/CSS/mix-blend-mode)を使うと、重なり方に変化を付けることができて面白い。また、よくある小ワザとして、要素の位置に応じて、ぼかしをかけたり、アニメーションの量に強弱を付けたりすると、遠近感を出すことができる。

::: {.panel-tabset group="OverlapDiv.tsx"}

## Video

```{=mdx}
import { OverlapDiv } from "@site/src/components/Layout/OverlapDiv.tsx";

export const MyPlayer5 = () => (
  <Player
    component={OverlapDiv}
    durationInFrames={240}
    compositionWidth={768}
    compositionHeight={432}
    fps={30}
    controls
    loop
    style={{ width: "100%" }}
  >
  </Player>
);

<MyPlayer5></MyPlayer5>

---
```

## Code

```{.tsx filename="Repeat/OverlapDiv.tsx"}
{{< include ../../src/components/Layout/OverlapDiv.tsx  >}}
```

:::
